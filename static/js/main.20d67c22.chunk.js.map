{"version":3,"sources":["components/Day.js","components/Days.js","components/Head.js","components/Degree.js","components/LoadAnim.js","App.js","serviceWorker.js","index.js","components/images/loadScreen.jpg","components/images/rain.jpg","components/images/thunderstorm.jpg","components/images/fog.jpg","components/images/snow.jpg","components/images/clear.jpg","components/images/clouds.jpg"],"names":["Day","react_default","a","createElement","className","this","props","weather","temp","date","React","Component","Days","list","map","item","src_components_Day","dt_txt","slice","Math","round","main","key","dt","Button_default","size","style","height","onClick","handleUpdate","lastUpdate","UpdateRounded_default","marginLeft","Head","day","month","year","Degree","city","country","LoadAnim","backgroundImage","concat","loadScreen","position","left","right","top","fontSize","status","id","App","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","latitude","longitude","onLoad","geoSuccess","bind","assertThisInitialized","geoError","startPos","coords","setState","lat","lon","_this2","xhrDay","XMLHttpRequest","xhrDays","open","send","onreadystatechange","readyState","statusText","JSON","parse","responseText","name","sys","Date","now","getHours","getMinutes","error","code","navigator","geolocation","getCurrentPosition","maximumAge","timeout","getDay","getMonth","getFullYear","weatherId","clear","clouds","fog","snow","rain","thunderstorm","bgImage","react_transition_group","component","classNames","src_components_LoadAnim","src_components_Head","getDateNow","src_components_Degree","src_components_Days","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","serviceWorker","ready","then","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"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","file":"static/js/main.20d67c22.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Day.css';\r\n\r\nclass Day extends React.Component{\r\n    render(){\r\n        return(\r\n            <div className = 'Day'>\r\n                <div className = 'weather'>{this.props.weather}</div>\r\n                <div className = 'degree'>{this.props.temp}<span className = 'deg-symbol'>&deg;</span>C</div>\r\n                <div className = 'date'>{this.props.date}</div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Day;","import React from 'react';\r\nimport './Days.css';\r\nimport Day from './Day';\r\nimport Update from '@material-ui/icons/UpdateRounded';\r\nimport Button from '@material-ui/core/Button';\r\n\r\nclass Days extends React.Component{\r\n    render() {\r\n        const list = this.props.list.map(item => <Day \r\n            date = {item.dt_txt.slice(0, -3)} \r\n            temp = {Math.round(item.main.temp)} \r\n            weather = {item.weather[0].main}\r\n            key = {item.dt} \r\n        />)\r\n        return(\r\n            <div className = 'Days'>\r\n                <Button \r\n                    size=\"small\" \r\n                    style = {{height: '40px'}}\r\n                    onClick = {this.props.handleUpdate}\r\n                >\r\n                    last update: {this.props.lastUpdate ? this.props.lastUpdate : 'N/A'}\r\n                    <Update style = {{marginLeft: '10px'}}/>\r\n                </Button>\r\n                <div className = 'box'>\r\n                    {list}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Days;","import React from 'react';\r\nimport './Head.css';\r\n\r\nclass Head extends React.Component{\r\n    render(){\r\n        return(\r\n            <div className = 'Head'>\r\n                <div className = 'day-of-the-week'>{this.props.day}</div>\r\n                <div className = 'month'>{this.props.month} {this.props.year}</div>\r\n                <div className = 'weather'>{this.props.weather}</div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Head;","import React from 'react';\r\nimport './Degree.css';\r\n\r\nclass Degree extends React.Component{\r\n    render(){\r\n\r\n        return(\r\n            <div className = 'Degree'>\r\n                <div className = 'degree'>{this.props.temp}<span className = 'deg-symbol'>&deg;</span>C</div>\r\n                <div className = 'city'>{this.props.city}, {this.props.country}</div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Degree;","import React from 'react';\r\nimport './LoadAnim.css';\r\nimport loadScreen from './images/loadScreen.jpg'\r\n\r\nclass LoadAnim extends React.Component {\r\n    render() {\r\n        return(\r\n            <div className = 'LoadAnim' style = {{backgroundImage: `url(${loadScreen})`}}>\r\n                <div style = {{position: \"absolute\", left: 0, right: 0, top: '50px', fontSize: '20px'}}>\r\n                    {this.props.status}\r\n                </div>\r\n                <div className=\"windows8\">\r\n                    <div className=\"wBall\" id=\"wBall_1\">\r\n                        <div className=\"wInnerBall\"></div>\r\n                    </div>\r\n                    <div className=\"wBall\" id=\"wBall_2\">\r\n                        <div className=\"wInnerBall\"></div>\r\n                    </div>\r\n                    <div className=\"wBall\" id=\"wBall_3\">\r\n                        <div className=\"wInnerBall\"></div>\r\n                    </div>\r\n                    <div className=\"wBall\" id=\"wBall_4\">\r\n                        <div className=\"wInnerBall\"></div>\r\n                    </div>\r\n                    <div className=\"wBall\" id=\"wBall_5\">\r\n                        <div className=\"wInnerBall\"></div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default LoadAnim;","import React, { Component } from 'react';\nimport './App.css';\nimport Days from './components/Days';\nimport Head from './components/Head';\nimport Degree from './components/Degree';\nimport rain from './components/images/rain.jpg'\nimport thunderstorm from './components/images/thunderstorm.jpg'\nimport fog from './components/images/fog.jpg'\nimport snow from './components/images/snow.jpg'\nimport clear from './components/images/clear.jpg'\nimport clouds from './components/images/clouds.jpg'\nimport LoadAnim from './components/LoadAnim';\nimport { TransitionGroup, CSSTransition } from \"react-transition-group\";\nimport loadScreen from './components/images/loadScreen.jpg'\n\nclass App extends Component {\n  constructor() {\n    super();\n\n    this.state = {\n      weather: '',\n      latitude: '',\n      longitude: '',\n      temp: 'N/A',\n      list: [],\n      id: '',\n      onLoad: true, \n      status: 'Getting location',\n      city: 'N/A',\n      country: 'N/A'\n    }\n\n    this.geoSuccess = this.geoSuccess.bind(this);\n    this.weather = this.weather.bind(this);\n    this.geoError = this.geoError.bind(this);\n    this.handleUpdate = this.handleUpdate.bind(this);\n  }\n\n  geoSuccess(position) {\n    let startPos = position;\n\n    //console.log(startPos.coords.latitude);\n    //console.log(startPos.coords.longitude);\n    this.weather(startPos.coords.latitude, startPos.coords.longitude);\n    this.setState({\n      latitude: startPos.coords.latitude,\n      longitude: startPos.coords.longitude\n    });\n  }\n\n  weather(lat, lon) {\n    let xhrDay = new XMLHttpRequest();\n    let xhrDays = new XMLHttpRequest();\n\n    xhrDay.open('GET', `https://api.openweathermap.org/data/2.5/weather?lat=${lat}&lon=${lon}&units=metric&appid=b300ca69f98ecd8d6d52349dc0450de7`);\n    xhrDay.send();\n\n    xhrDay.onreadystatechange = () => {\n      if (xhrDay.readyState !== 4) return;\n      if (xhrDay.status !== 200) {\n        this.setState({\n         status: xhrDay.status + ': ' + xhrDay.statusText\n        })\n       } else {\n          const weather = JSON.parse(xhrDay.responseText);\n          //console.log(weather)\n   \n           this.setState({\n             weather: weather.weather[0].main,\n             temp: Math.round(weather.main.temp),\n             city: weather.name,\n             country: weather.sys.country,\n             day: new Date(),\n             id: weather.weather[0].id\n           })\n         }\n    }\n\n    xhrDays.open('GET', `https://api.openweathermap.org/data/2.5/forecast?lat=${lat}&lon=${lon}&units=metric&appid=b300ca69f98ecd8d6d52349dc0450de7`);\n    xhrDays.send();\n\n    xhrDays.onreadystatechange = () => {\n      if (xhrDays.readyState !== 4) return;      \n      if (xhrDays.status !== 200) {\n        this.setState({\n         status: xhrDays.status + ': ' + xhrDays.statusText\n        })\n       } else {\n           const weather = JSON.parse(xhrDays.responseText);\n           //console.log(weather)\n   \n           this.setState({\n             list: weather.list,\n             onLoad: false,\n             lastUpdate: this.lastUpdate()\n           })\n         }\n    }\n  }\n\n  lastUpdate() {\n    const now = new Date();\n\n    return `${now.getHours()}:${now.getMinutes()}`\n  }\n\n  geoError(error) {\n    let status;\n    //console.log('Error occurred. Error code: ' + error.code);\n      // error.code can be:\n      //   0: unknown error\n      //   1: permission denied\n      //   2: position unavailable (error response from location provider)\n      //   3: timed out\n    if(error.code === 0){\n        status = 'Unknown error. Please try again'\n      }\n      else if(error.code === 1){\n         status = 'To determine the weather, the app needs your location'\n        } \n        else if(error.code === 2){\n          status = 'Position unavailable. Please try again'\n         }\n         else if(error.code === 3){\n          status = 'Timed out. Please try again'\n         }\n\n      this.setState({\n        status: status\n      })\n  }\n\n  handleUpdate() {\n    this.weather(this.state.latitude, this.state.longitude);\n  }\n\n  componentDidMount(){\n    let geoOptions = {\n      //enableHighAccuracy: true,\n      maximumAge: 5 * 60 * 1000,\n      timeout: 10 * 1000\n    }\n\n    navigator.geolocation.getCurrentPosition(this.geoSuccess, this.geoError, geoOptions);\n  }\n\n  getDateNow(){\n    let date = new Date();\n    let day;\n    let month;\n\n    switch(date.getDay()){\n      case 0: \n        day = 'Sunday' \n        break;\n      case 1: \n        day = 'Monday' \n        break;\n      case 2: \n        day = 'Tuesday' \n        break;\n      case 3: \n        day = 'Wednesday' \n        break;\n      case 4: \n        day = 'Thursday' \n        break;\n      case 5: \n        day = 'Friday' \n        break;\n      case 6: \n        day = 'Saturday' \n        break;\n      default:\n    }\n\n    switch(date.getMonth()){\n      case 0: month = 'January' \n        break;\n      case 1: month = 'February' \n        break;\n      case 2: month = 'March' \n        break;\n      case 3: month = 'April' \n        break;\n      case 4: month = 'May' \n        break;\n      case 5: month = 'June' \n        break;\n      case 6: month = 'July' \n        break;\n      case 7: month = 'August' \n        break;\n      case 8: month = 'September' \n        break;\n      case 9: month = 'October' \n        break;\n      case 10: month = 'November' \n        break;\n      case 11: month = 'December' \n        break;\n      default:\n    }\n\n    return [day, month, date.getFullYear()]\n  }\n\n  bgImage() {\n    let weatherId = this.state.id;\n\n    if(weatherId === 800){\n      return clear;\n    }\n    else if(weatherId > 800){\n        return clouds;\n      }\n      else if(weatherId > 700){\n          return fog;\n        }\n        else if(weatherId >= 600){\n            return snow;\n          }\n          else if(weatherId >= 500 || weatherId >= 300) {\n              return rain;\n            }\n            else if(weatherId >= 200) {\n                return thunderstorm;\n              } \n              else return loadScreen;\n  }\n\n  render() {\n    //const forecastList = this.state.list.map(item => );\n    //console.log(this.state.onLoad)\n    return (\n      <div className = 'App' style = {{backgroundImage: `url(${this.bgImage()})`}}>\n        <TransitionGroup component={null}>\n          {\n            this.state.onLoad && \n            <CSSTransition classNames=\"fade\" timeout={350} >\n              <LoadAnim status = {this.state.status}/>\n            </CSSTransition>\n          }\n        </TransitionGroup>\n        <div className = 'box-main'>\n          <Head \n            day = {this.getDateNow()[0]} \n            month = {this.getDateNow()[1]} \n            year = {this.getDateNow()[2]}\n            weather = {this.state.weather}\n          />\n          <Degree \n            temp = {this.state.temp} \n            city = {this.state.city} \n            country = {this.state.country}\n          />\n        </div>\n        <Days list = {this.state.list} lastUpdate = {this.state.lastUpdate}  handleUpdate = {this.handleUpdate} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/loadScreen.980ae7d4.jpg\";","module.exports = __webpack_public_path__ + \"static/media/rain.927a63cc.jpg\";","module.exports = __webpack_public_path__ + \"static/media/thunderstorm.9f339257.jpg\";","module.exports = __webpack_public_path__ + \"static/media/fog.a0e01455.jpg\";","module.exports = __webpack_public_path__ + \"static/media/snow.12df609b.jpg\";","module.exports = __webpack_public_path__ + \"static/media/clear.c2e8dca6.jpg\";","module.exports = __webpack_public_path__ + \"static/media/clouds.914cfd9d.jpg\";"],"sourceRoot":""}